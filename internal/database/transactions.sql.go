// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createATransaction = `-- name: CreateATransaction :one
INSERT INTO transactions(id, user_id, stock_symbol, type, quantity, price, total_amount, created_at)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    NOW()
)
RETURNING id, user_id, stock_symbol, type, quantity, price, total_amount, created_at
`

type CreateATransactionParams struct {
	UserID      uuid.UUID `json:"user_id"`
	StockSymbol string    `json:"stock_symbol"`
	Type        string    `json:"type"`
	Quantity    int32     `json:"quantity"`
	Price       string    `json:"price"`
	TotalAmount string    `json:"total_amount"`
}

func (q *Queries) CreateATransaction(ctx context.Context, arg CreateATransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createATransaction,
		arg.UserID,
		arg.StockSymbol,
		arg.Type,
		arg.Quantity,
		arg.Price,
		arg.TotalAmount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockSymbol,
		&i.Type,
		&i.Quantity,
		&i.Price,
		&i.TotalAmount,
		&i.CreatedAt,
	)
	return i, err
}

const getAllTransactionsForUser = `-- name: GetAllTransactionsForUser :many
SELECT id, user_id, stock_symbol, type, quantity, price, total_amount, created_at FROM transactions
WHERE user_id = $1
ORDER BY created_at DESC 
LIMIT 10
`

func (q *Queries) GetAllTransactionsForUser(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StockSymbol,
			&i.Type,
			&i.Quantity,
			&i.Price,
			&i.TotalAmount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTransactionsForUserBySymbol = `-- name: GetAllTransactionsForUserBySymbol :many
SELECT id, user_id, stock_symbol, type, quantity, price, total_amount, created_at FROM transactions
WHERE user_id = $1 AND stock_symbol = $2
`

type GetAllTransactionsForUserBySymbolParams struct {
	UserID      uuid.UUID `json:"user_id"`
	StockSymbol string    `json:"stock_symbol"`
}

func (q *Queries) GetAllTransactionsForUserBySymbol(ctx context.Context, arg GetAllTransactionsForUserBySymbolParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactionsForUserBySymbol, arg.UserID, arg.StockSymbol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StockSymbol,
			&i.Type,
			&i.Quantity,
			&i.Price,
			&i.TotalAmount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
