// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: holdings.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewHoldingOrUpdateExistingForUser = `-- name: CreateNewHoldingOrUpdateExistingForUser :one
INSERT INTO holdings(id, user_id, stock_symbol, quantity, average_price, created_at, updated_at)
VALUES (
    gen_random_uuid(),
    $1,  
    $2,  
    $3,  
    $4,  
    NOW(),
    NOW()
)
ON CONFLICT (user_id, stock_symbol) DO UPDATE
SET 
    quantity      = EXCLUDED.quantity,
    average_price = EXCLUDED.average_price,
    updated_at    = NOW()
RETURNING id, user_id, stock_symbol, quantity, average_price, created_at, updated_at
`

type CreateNewHoldingOrUpdateExistingForUserParams struct {
	UserID       uuid.UUID `json:"user_id"`
	StockSymbol  string    `json:"stock_symbol"`
	Quantity     int32     `json:"quantity"`
	AveragePrice string    `json:"average_price"`
}

func (q *Queries) CreateNewHoldingOrUpdateExistingForUser(ctx context.Context, arg CreateNewHoldingOrUpdateExistingForUserParams) (Holding, error) {
	row := q.db.QueryRowContext(ctx, createNewHoldingOrUpdateExistingForUser,
		arg.UserID,
		arg.StockSymbol,
		arg.Quantity,
		arg.AveragePrice,
	)
	var i Holding
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockSymbol,
		&i.Quantity,
		&i.AveragePrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHoldingsOnSellOut = `-- name: DeleteHoldingsOnSellOut :execrows
DELETE FROM holdings 
WHERE holdings.user_id = $1 AND holdings.stock_symbol = $2
`

type DeleteHoldingsOnSellOutParams struct {
	UserID      uuid.UUID `json:"user_id"`
	StockSymbol string    `json:"stock_symbol"`
}

func (q *Queries) DeleteHoldingsOnSellOut(ctx context.Context, arg DeleteHoldingsOnSellOutParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteHoldingsOnSellOut, arg.UserID, arg.StockSymbol)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllHoldingsForUser = `-- name: GetAllHoldingsForUser :many
SELECT 
    holdings.stock_symbol AS stock_symbol,
    stocks.company_name AS company_name,
    holdings.quantity AS quantity,
    holdings.average_price AS average_price,
    stocks.current_price AS current_price
FROM holdings
JOIN stocks
ON holdings.stock_symbol = stocks.symbol
WHERE holdings.user_id = $1
`

type GetAllHoldingsForUserRow struct {
	StockSymbol  string `json:"stock_symbol"`
	CompanyName  string `json:"company_name"`
	Quantity     int32  `json:"quantity"`
	AveragePrice string `json:"average_price"`
	CurrentPrice string `json:"current_price"`
}

func (q *Queries) GetAllHoldingsForUser(ctx context.Context, userID uuid.UUID) ([]GetAllHoldingsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllHoldingsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHoldingsForUserRow
	for rows.Next() {
		var i GetAllHoldingsForUserRow
		if err := rows.Scan(
			&i.StockSymbol,
			&i.CompanyName,
			&i.Quantity,
			&i.AveragePrice,
			&i.CurrentPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHoldingByStockSymbol = `-- name: GetHoldingByStockSymbol :one
SELECT id, user_id, stock_symbol, quantity, average_price, created_at, updated_at FROM holdings
WHERE user_id = $1 AND stock_symbol = $2
`

type GetHoldingByStockSymbolParams struct {
	UserID      uuid.UUID `json:"user_id"`
	StockSymbol string    `json:"stock_symbol"`
}

func (q *Queries) GetHoldingByStockSymbol(ctx context.Context, arg GetHoldingByStockSymbolParams) (Holding, error) {
	row := q.db.QueryRowContext(ctx, getHoldingByStockSymbol, arg.UserID, arg.StockSymbol)
	var i Holding
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockSymbol,
		&i.Quantity,
		&i.AveragePrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStockSymbolsOfHoldings = `-- name: GetStockSymbolsOfHoldings :many
SELECT DISTINCT stock_symbol
FROM holdings
`

func (q *Queries) GetStockSymbolsOfHoldings(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getStockSymbolsOfHoldings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var stock_symbol string
		if err := rows.Scan(&stock_symbol); err != nil {
			return nil, err
		}
		items = append(items, stock_symbol)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
