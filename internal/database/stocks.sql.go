// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: stocks.sql

package database

import (
	"context"
	"database/sql"
)

const createNewStockOrUpdateExisting = `-- name: CreateNewStockOrUpdateExisting :one
INSERT INTO stocks(symbol, company_name, current_price, previous_close, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    NOW()
)
ON CONFLICT (symbol) DO UPDATE
SET 
    company_name = EXCLUDED.company_name,
    current_price = EXCLUDED.current_price,
    previous_close = EXCLUDED.previous_close,
    updated_at = NOW()
RETURNING symbol, company_name, current_price, previous_close, updated_at
`

type CreateNewStockOrUpdateExistingParams struct {
	Symbol        string          `json:"symbol"`
	CompanyName   string          `json:"company_name"`
	CurrentPrice  float64         `json:"current_price"`
	PreviousClose sql.NullFloat64 `json:"previous_close"`
}

func (q *Queries) CreateNewStockOrUpdateExisting(ctx context.Context, arg CreateNewStockOrUpdateExistingParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, createNewStockOrUpdateExisting,
		arg.Symbol,
		arg.CompanyName,
		arg.CurrentPrice,
		arg.PreviousClose,
	)
	var i Stock
	err := row.Scan(
		&i.Symbol,
		&i.CompanyName,
		&i.CurrentPrice,
		&i.PreviousClose,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllStocks = `-- name: GetAllStocks :many
SELECT symbol, company_name, current_price, previous_close, updated_at FROM stocks
ORDER BY updated_at DESC
LIMIT 10
`

func (q *Queries) GetAllStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getAllStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.Symbol,
			&i.CompanyName,
			&i.CurrentPrice,
			&i.PreviousClose,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockBySymbol = `-- name: GetStockBySymbol :one
SELECT symbol, company_name, current_price, previous_close, updated_at FROM stocks
WHERE symbol = $1
`

func (q *Queries) GetStockBySymbol(ctx context.Context, symbol string) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStockBySymbol, symbol)
	var i Stock
	err := row.Scan(
		&i.Symbol,
		&i.CompanyName,
		&i.CurrentPrice,
		&i.PreviousClose,
		&i.UpdatedAt,
	)
	return i, err
}

const searchStockByName = `-- name: SearchStockByName :many
SELECT symbol, company_name, current_price, previous_close, updated_at
FROM stocks
WHERE company_name ILIKE '%' || $1 || '%' OR symbol ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchStockByName(ctx context.Context, dollar_1 sql.NullString) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, searchStockByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.Symbol,
			&i.CompanyName,
			&i.CurrentPrice,
			&i.PreviousClose,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStockPrice = `-- name: UpdateStockPrice :one
UPDATE stocks
SET 
    current_price = $1,
    previous_close = $2,
    updated_at = NOW()
WHERE symbol = $3
RETURNING symbol, company_name, current_price, previous_close, updated_at
`

type UpdateStockPriceParams struct {
	CurrentPrice  float64         `json:"current_price"`
	PreviousClose sql.NullFloat64 `json:"previous_close"`
	Symbol        string          `json:"symbol"`
}

func (q *Queries) UpdateStockPrice(ctx context.Context, arg UpdateStockPriceParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, updateStockPrice, arg.CurrentPrice, arg.PreviousClose, arg.Symbol)
	var i Stock
	err := row.Scan(
		&i.Symbol,
		&i.CompanyName,
		&i.CurrentPrice,
		&i.PreviousClose,
		&i.UpdatedAt,
	)
	return i, err
}
